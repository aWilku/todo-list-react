{"version":3,"sources":["App/Container/Section/Buttons/index.js","App/Container/Section/Form/index.js","App/Container/Header/index.js","App/Container/Section/index.js","App/Container/Section/Tasks/index.js","App/Container/index.js","App/index.js","App/useTasks.js","reportWebVitals.js","index.js"],"names":["Buttons","tasks","hideDone","toggleHideDone","setAllDone","className","length","onClick","disabled","every","done","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","trimedNewTaskContent","trim","ref","value","placeholder","autoFocus","onChange","target","current","focus","Header","title","Section","body","extraHeaderContent","Tasks","removeTask","toggleTaskDone","map","task","id","content","Container","children","App","setHideDone","savedTaskInLocaleStorage","localStorage","getItem","JSON","parse","setTasks","useEffect","setItem","stringify","filter","useTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d654d19.chunk.js","sourcesContent":["import \"./style.css\"\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    <div className=\"buttons\">\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <button\r\n                    onClick={toggleHideDone}\r\n                    className=\"buttons__button\"\r\n                    disabled={tasks.every(({ done }) => !done)}\r\n                >\r\n                    {hideDone ? \"PokaÅ¼ ukoÅ„czone\" : \"Ukryj ukoÅ„czone\"}\r\n                </button>\r\n                <button\r\n                    onClick={setAllDone}\r\n                    className=\"buttons__button\"\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    UkoÅ„cz wszystkie\r\n                </button>\r\n            </>\r\n        )}\r\n    </div>\r\n);\r\n\r\nexport default Buttons;","import { useState, useRef } from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const trimedNewTaskContent = newTaskContent.trim();\r\n        if (trimedNewTaskContent.length > 0) {\r\n            addNewTask(trimedNewTaskContent);\r\n        }\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                className=\"form__input\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                autoFocus\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <button\r\n                onClick={focusInput}\r\n                className=\"form__button\"\r\n            >\r\n                Dodaj zadanie\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","import \"./style.css\"\r\n\r\nconst Header = ({ title }) => (\r\n    <header className=\"header\">\r\n        <h1 className=\"header__title\">{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import \"./style.css\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <section className=\"section\">\r\n        <header className=\"section__header\">\r\n            <h2 className=\"section__title\">{title}</h2>\r\n            {extraHeaderContent}\r\n        </header>\r\n        {body}\r\n    </section>\r\n);\r\n\r\nexport default Section;","import \"./style.css\"\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <ul className=\"taskList\">\r\n        {tasks.map(task => (\r\n            <li key={task.id} className={`taskList__element ${(task.done && hideDone) ? \"taskList__element--hidden\" : \"\"}`}>\r\n                <button\r\n                    className=\"taskList__button taskList__button--done\"\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                >\r\n                    {task.done ? \"âœ”\" : \"\"}\r\n                </button>\r\n                <span className={`taskList__text${task.done ? \" taskList__text--done\" : \"\"}`}>\r\n                    {task.id}. {task.content}\r\n                </span>\r\n                <button\r\n                    className=\"taskList__button taskList__button--remove\"\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                    ðŸ—‘\r\n                </button>\r\n            </li>\r\n        ))}\r\n    </ul >\r\n);\r\n\r\nexport default Tasks;","import \"./style.css\"\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import { useState } from \"react\";\nimport { useTask } from \"./useTasks\";\nimport Buttons from \"./Container/Section/Buttons\";\nimport Form from \"./Container/Section/Form\";\nimport Header from \"./Container/Header\";\nimport Section from \"./Container/Section\";\nimport Tasks from \"./Container/Section/Tasks\";\nimport Container from \"./Container\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const {\n    tasks,\n    removeTask,\n    toggleTaskDone,\n    setAllDone,\n    addNewTask\n  } = useTask();\n\n  return (\n    <Container>\n      <Header\n        title=\"Lista zadaÅ„\"\n      />\n\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={\n          <Form addNewTask={addNewTask} />\n        }\n      />\n\n      <Section\n        title=\"Lista zadaÅ„\"\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n      />\n    </Container>\n  );\n};\nexport default App;\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useTask = () => {\r\n    const savedTaskInLocaleStorage = localStorage.getItem(\"tasks\");\r\n\r\n    const [tasks, setTasks] = useState(\r\n        JSON.parse(savedTaskInLocaleStorage) || []\r\n    );\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n    }, [tasks]);\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id));\r\n    };\r\n\r\n    const toggleTaskDone = (id) => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return { ...task, done: !task.done };\r\n            };\r\n\r\n            return task;\r\n        }));\r\n    };\r\n\r\n    const setAllDone = () => {\r\n        setTasks(tasks => tasks.map(task => ({\r\n            ...task,\r\n            done: true,\r\n        })));\r\n    };\r\n\r\n    const addNewTask = (content) => {\r\n        setTasks(tasks => [\r\n            ...tasks,\r\n            {\r\n                content,\r\n                done: false,\r\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n            },\r\n        ]);\r\n    };\r\n\r\n    return {\r\n        tasks,\r\n        removeTask,\r\n        toggleTaskDone,\r\n        setAllDone,\r\n        addNewTask\r\n    };\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}